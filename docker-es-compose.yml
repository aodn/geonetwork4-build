# GeoNetwork
#
# Access via "http://localhost:8080/geonetwork" (or "http://$(docker-machine ip):8080/geonetwork" if using docker-machine)
#
# Default user: admin
# Default password: admin

version: '3.7'
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    networks:
      - elastic
    volumes:
      - ./elasticdata/certs:/usr/share/elasticsearch/config/certs
    user: "root"
    env_file:
      - .env
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es-container\n"\
          "    dns:\n"\
          "      - es-container\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 10.5.0.5\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 777 \{\} \;;
        find . -type f -exec chmod 666 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es-container:9200 | grep -q "missing authentication credentials"; do echo "Waiting es-container up... "; sleep 2; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:open-sesame" -H "Content-Type: application/json" https://es-container:9200/_security/user/kibana_system/_password -d "{\"password\":\"password\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es-container/es-container.crt ]"]
      interval: 5s
      timeout: 5s
      retries: 120
      start_period: 20s

  # Intended to set the max to 1G to match the cloud dev env, this can simulate issue with running in
  # low memory environment.
  es-container:
    container_name: es-container
    hostname: es-container
    depends_on:
      - setup
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 4GB
    restart: always
    user: "1000:1000"
    volumes:
      - ./elasticdata/elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticdata/certs:/usr/share/elasticsearch/config/certs
    env_file:
      - .env
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx1g
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es-container/es-container.key
      - xpack.security.http.ssl.certificate=certs/es-container/es-container.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es-container/es-container.key
      - xpack.security.transport.ssl.certificate=certs/es-container/es-container.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - discovery.type=single-node
      - ELASTIC_PASSWORD=open-sesame
    networks:
      elastic:
        ipv4_address: 10.5.0.5
    ports:
      - 9200:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://es-container:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kb-container
    hostname: kb-container
    image: docker.elastic.co/kibana/kibana:8.11.3
    restart: always
    user: "1000:1000"
    env_file:
      - .env
    volumes:
      - ./elasticdata/certs:/usr/share/kibana/config/certs
      - ./elasticdata/kibana-data:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=https://es-container:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=password
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ENTERPRISESEARCH_HOST=http://enterprise-search:3002
    depends_on:
      - setup
      - es-container
    networks:
      elastic:
        ipv4_address: 10.5.0.4
    ports:
      - 5601:5601
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kb-container:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  enterprisesearch:
    container_name: enterprise-search
    hostname: enterprise-search
    depends_on:
      - kibana
    env_file:
      - .env
    restart: always
    user: "1000:1000"
    image: docker.elastic.co/enterprise-search/enterprise-search:8.11.3
    volumes:
      - ./elasticdata/certs:/usr/share/enterprise-search/config/certs
      - ./elasticdata/enterprisesearch-data:/usr/share/enterprise-search/data
    ports:
      - 3002:3002
    networks:
      elastic:
        ipv4_address: 10.5.0.3
    environment:
      - SERVERNAME=enterprise-search
      - secret_management.encryption_keys=["secret"]
      - allow_es_settings_modification=true
      - elasticsearch.host=https://es-container:9200
      - elasticsearch.username=elastic
      - elasticsearch.password=open-sesame
      - elasticsearch.ssl.enabled=true
      - elasticsearch.ssl.certificate_authority=/usr/share/enterprise-search/config/certs/ca/ca.crt
      - kibana.external_url=http://kb-container:5601
      - ent_search.external_url=http://enterprise-search:3002
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://enterprise-search:3002 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  elasticdata:
    driver: local

networks:
  elastic:
    name: elastic
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
